### --------------- List of tags that are used to select a runner. --------------- ###
## Обязательный блок для запуска gitlab-ci. Определяет, на каких runner-ах будет запущен CI/CD путем выбора его с помощью tag'а. ##

default:
  tags:
  - bigdata
  - dmz
  - docker

### --------------- Defines a job stage. --------------- ###
## Stage .pre выполняется перед всем остальным кодом. stage .post выполняется после всего остального кода. ##
## Так же можо задать порядок выполнения stage-ов, указав их по порядку в этом блоке. ##

stages:
- .pre
- static analysis
- build
- unit_tests
- sonarqube_check
- build_docs
- artifactory
- deploy
- .post

### --------------- Include gitlab-ci-templates --------------- ###
## Добавляет в текущую конфигурацию CI\CD template's из DevOps репозитория для переиспользования. ##

include:
# VAULT
- project: DevOps/cicd-store/gitlabci/vault
  ref: v3
  file: .base_devops_get_cicd_secrets.yml

# DOCKER
- project: DevOps/cicd-store/gitlabci/docker
  ref: v5
  file:
  - .base_docker_build.yml
  - .base_docker_cleaner.yml

# SONARQUBE
- project: DevOps/cicd-store/gitlabci/sonarqube
  ref: v1
  file: .base_check_sonarqube.yml

# Artifactory
- project: DevOps/cicd-store/gitlabci/artifactory
  ref: v3
  file: .base_rt_upload.yml

# PIP BUILD AND DEPLOY TO JFROG
- project: DevOps/cicd-store/gitlabci/pip
  ref: v2
  file: .base_pip_pkg_build_and_deploy_to_jfrog.yml

# Pages
- project: DevOps/cicd-store/gitlabci/pages
  ref: v1
  file: .base_pages_deploy_sphinx.yml

### --------------- Get VAULT SECRET --------------- ###
## Переиспользование добавленного template'а по добавлению SSH-ключа пользователя ansible. ##
devops_get_cicd_secrets:
  extends: .base_devops_get_cicd_secrets
  interruptible: true

mypy:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  # remove fixed mypy version after https://github.com/samuelcolvin/pydantic/issues/3528
  - pip3 install "mypy<0.920" pydantic
  - python3 -m mypy etl_entities
  interruptible: true

flake8:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip3 install wemake-python-styleguide bandit==1.7.2
  - python3 -m flake8 --format=default . 2>&1 | tee flake8.txt
  artifacts:
    when: always
    paths: [flake8.txt]
  interruptible: true

black:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip3 install black
  - python3 -m black . --check
  interruptible: true

build_docker_image:
  extends: .base_docker_build
  stage: build
  variables:
    DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    DOCKER_BUILD_EXTRA_ARGS: --build-arg BUILD_NUMBER=$CI_PIPELINE_ID --build-arg BRANCH_NAME=$CI_COMMIT_BRANCH
    DOCKER_CACHE_FROM: ${CI_REGISTRY}/${CI_PROJECT_PATH}:dev
    STOP_IF_EXISTS: "false"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop|master|main)$/
    variables:
      DOCKER_ADDITIONAL_TAGS: dev
  - if: $CI_COMMIT_TAG
    variables:
      DOCKER_ADDITIONAL_TAGS: latest
      DOCKER_IMAGE_TAG: ${CI_COMMIT_TAG}
  - when: on_success
  interruptible: true

run_unit_tests:
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${DOCKER_IMAGE_TAG}
  stage: unit_tests
  variables:
    DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    JUNIT_FILE: ${CI_PROJECT_DIR}/junitxml.xml
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage.xml
  script:
  - pytest --verbose -s tests --cov-append --cov=etl_entities --cov-config=tests/.coveragerc --cov-report=xml:${COVERAGE_FILE} --junitxml=${JUNIT_FILE}
  after_script:
  - sed -i s/'\/app\/etl_entities'/'etl_entities'/ ${COVERAGE_FILE}
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop|master|main)$/
    variables:
      DOCKER_IMAGE_TAG: dev
  - if: $CI_COMMIT_TAG
    variables:
      DOCKER_IMAGE_TAG: ${CI_COMMIT_TAG}
  - when: on_success
  artifacts:
    when: always
    paths:
    - ${COVERAGE_FILE}
    reports:
      junit:
      - ${JUNIT_FILE}
      cobertura:
      - ${COVERAGE_FILE}
  interruptible: true

sonarqube_check:
  extends: .base_check_sonarqube
  stage: sonarqube_check
  variables:
    SONAR_SOURCES: etl_entities
  interruptible: true

build_and_deploy:
  extends: .base_pip_pkg_build_and_deploy_to_jfrog
  stage: artifactory
  variables:
    PYTHON_VERSION: '3.7'
  interruptible: true

build_docs:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: build_docs
  before_script:
  - export VERSION=$(python setup.py --version)
  script:
  - pip3 install -r requirements-docs.txt
  - cd docs
  - make html
  - tar cvzf html-${VERSION}.tar.gz -C _build/html .
  - >
    if [ "$CI_COMMIT_TAG" != "" ];
    then cp html-${VERSION}.tar.gz html-latest.tar.gz;
    fi
  artifacts:
    paths:
      - docs/html-*.tar.gz
  interruptible: true

publish_docs:
  extends: .base_rt_upload
  stage: artifactory
  variables:
    JFROG_RT_ARTIFACTS_PATTERN: "docs/html-*.tar.gz"
    JFROG_RT_UPLOAD_PATH: "files/onetools/${CI_PROJECT_NAME}/"
  dependencies:
    - build_docs
    - devops_get_cicd_secrets
  interruptible: true

### --------------- DEPLOY --------------- ###
pages:
  extends: .base_pages_deploy_sphinx
  stage: deploy
  dependencies:
  - publish_docs
  variables:
    CICD_PAGES_ARTIFACTORY_DOCS_PATH: files/onetools/${CI_PROJECT_NAME}/docs
  interruptible: true

clean_docker_repo:
  extends: .base_docker_cleaner
  stage: .post
  variables:
    DOCKER_IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop|master|main)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: always
